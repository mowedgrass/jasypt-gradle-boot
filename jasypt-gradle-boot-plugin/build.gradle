apply plugin: 'groovy'
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    compile gradleApi()

    compile 'org.springframework.boot:spring-boot-starter:1.3.0.RELEASE'
    compile 'com.github.mowedgrass:jasypt-gradle-boot-encryptor:0.1.32'

    testCompile 'org.spockframework:spock-core:1.0-groovy-2.3',
                'cglib:cglib-nodep:3.2.0',
                'org.objenesis:objenesis:2.2'
}

sourceSets {
    integrationTest {
        groovy {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integrationTest/groovy')
        }
        resources.srcDir file('src/integrationTest/resources')
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
}

check.dependsOn integrationTest
integrationTest.mustRunAfter test

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment ->
                signing.signPom(deployment)
            }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.withXml {
                (asNode().dependencies).forEach {
                    it.children().removeAll { it.scope.text() != 'compile' }
                }
            }

            pom.project {
                name "${project.group}:${project.name}"
                packaging 'jar'
                description 'jasypt spring boot gradle plugin'
                url 'https://github.com/mowedgrass/jasypt-gradle-boot'

                scm {
                    connection 'scm:git:git://github.com/mowedgrass/jasypt-gradle-boot.git'
                    developerConnection 'scm:git:git@github.com:mowedgrass/jasypt-gradle-boot.git'
                    url 'https://github.com/mowedgrass/jasypt-gradle-boot'
                }

                licenses {
                    license {
                        name 'The Apache License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        name 'mowedgrass'
                        email 'the.mowed.grass@gmail.com'
                    }
                }
            }
        }
    }
}

uploadArchives.dependsOn build

signing {
    sign configurations.archives
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.7'
}
